{
  "name": "nest-typescript-template",
  "version": "0.0.1",
  "description": "Production ready nest + typescript template",
  "author": "Umair Saleem",
  "private": true,
  "license": "MIT",
  "scripts": {
    "prebuild": "node scripts/prebuild.mjs",
    "build": "nest build",
    "format:check": "prettier . --check",
    "format:fix": "prettier . --write",
    "start": "cross-env NODE_ENV=development nest start",
    "start:dev": "cross-env NODE_ENV=development nest start --watch",
    "start:debug": "cross-env NODE_ENV=debuging nest start --debug --watch",
    "start:prod": "pm2 start ecosystem.config.json --no-daemon",
    "typecheck": "tsc --noEmit",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "test": "jest --passWithNoTests",
    "test:watch": "jest --watch --passWithNoTests",
    "test:band": "jest --runInBand --passWithNoTests",
    "test:watchBand": "jest --watchAll --runInBand --passWithNoTests",
    "test:ci": "jest --ci --passWithNoTests",
    "test:e2e": "jest --config jest.e2e.config.js --passWithNoTests",
    "test:e2e-watch": "jest --config jest.e2e.config.js --watch --passWithNoTests",
    "test:e2e-band": "jest --config jest.e2e.config.js --runInBand --passWithNoTests",
    "test:e2e-watchBand": "jest --config jest.e2e.config.js --watchAll --runInBand --passWithNoTests",
    "test:e2e:ci": "jest --config jest.e2e.config.js --ci --passWithNoTests",
    "test:cov": "jest --coverage --passWithNoTests",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand --passWithNoTests",
    "docker:dev:up": "docker-compose -f docker-compose.dev.yaml up",
    "docker:dev:down": "docker-compose -f docker-compose.dev.yaml down",
    "docker:prod:up": "docker-compose -f docker-compose.prod.yaml up",
    "docker:prod:down": "docker-compose -f docker-compose.prod.yaml down",
    "prepare": "husky install",
    "clean": "node scripts/clean.mjs",
    "pretest": "npm run db:client:generate:test:prisma && npm run db:reset:test:prisma",
    "pretest:watch": "npm run db:client:generate:test:prisma && npm run db:reset:test:prisma",
    "pretest:band": "npm run db:client:generate:test:prisma && npm run db:reset:test:prisma",
    "pretest:watchBand": "npm run db:client:generate:test:prisma && npm run db:reset:test:prisma",
    "pretest:ci": "npm run db:client:generate:test:prisma && npm run db:reset:test:prisma",
    "db:client:generate:dev:prisma": "dotenv -e .env.development cross-var -- prisma generate --schema=$PRISMA_SCHEMA_PATH",
    "db:client:generate:test:prisma": "dotenv -e .env.test cross-var -- prisma generate --schema=$PRISMA_SCHEMA_PATH",
    "db:migrate:generate:prisma": "dotenv -e .env.development cross-var -- prisma migrate dev --create-only --schema=$PRISMA_SCHEMA_PATH",
    "db:migrate:run:dev:prisma": "dotenv -e .env.development cross-var -- prisma migrate dev --schema=$PRISMA_SCHEMA_PATH",
    "db:migrate:run:prod:prisma": "dotenv -e .env.production cross-var -- prisma migrate deploy --schema=$PRISMA_SCHEMA_PATH",
    "db:migrate:status:prisma": "dotenv -e .env.development cross-var -- prisma migrate status --schema=$PRISMA_SCHEMA_PATH",
    "db:migrate:resolve:prisma": "dotenv -e .env.development cross-var -- prisma migrate resolve --schema=$PRISMA_SCHEMA_PATH",
    "db:reset:dev:prisma": "dotenv -e .env.development cross-var -- prisma migrate reset --schema=$PRISMA_SCHEMA_PATH",
    "db:reset:test:prisma": "dotenv -e .env.test cross-var -- prisma migrate reset --force --schema=$PRISMA_SCHEMA_PATH",
    "db:studio:prisma": "dotenv -e .env.development cross-var -- prisma studio --schema=$PRISMA_SCHEMA_PATH",
    "db:check:dev:prisma": "dotenv -e .env.development -- ts-node src/database/scripts/prisma/checkConnection.ts",
    "db:check:prod:prisma": "dotenv -e .env.production -- node dist/database/scripts/prisma/checkConnection.js",
    "db:seed:dev:prisma": "dotenv -e .env.development -- ts-node src/database/seeders/prisma/index.ts",
    "db:seed:prod:prisma": "dotenv -e .env.production -- node dist/database/seeders/prisma/index.js",
    "db:migrate:generate:typeorm": "dotenv -e .env.development -- ts-node -r tsconfig-paths/register src/database/scripts/typeorm/migrations.ts generate",
    "db:migrate:create:typeorm": "dotenv -e .env.development -- ts-node -r tsconfig-paths/register src/database/scripts/typeorm/migrations.ts create",
    "db:migrate:run:dev:typeorm": "dotenv -e .env.development -- ts-node -r tsconfig-paths/register src/database/scripts/typeorm/migrations.ts run",
    "db:migrate:run:prod:typeorm": "dotenv -e .env.production -- node dist/database/scripts/typeorm/migrations.ts run",
    "db:migrate:revert:dev:typeorm": "dotenv -e .env.development -- ts-node -r tsconfig-paths/register src/database/scripts/typeorm/migrations.ts revert",
    "db:migrate:revert:prod:typeorm": "dotenv -e .env.production -- node dist/database/scripts/typeorm/migrations.ts revert",
    "db:migrate:revertAll:dev:typeorm": "dotenv -e .env.development -- ts-node -r tsconfig-paths/register src/database/scripts/typeorm/migrations.ts revertAll",
    "db:migrate:revertAll:prod:typeorm": "dotenv -e .env.production -- node dist/database/scripts/typeorm/migrations.ts revertAll",
    "db:reset:dev:typeorm": "dotenv -e .env.development cross-var -- prisma migrate reset --schema=$PRISMA_SCHEMA_PATH",
    "db:reset:test:typeorm": "dotenv -e .env.test cross-var -- prisma migrate reset --force --schema=$PRISMA_SCHEMA_PATH",
    "db:check:dev:typeorm": "dotenv -e .env.development -- ts-node src/database/scripts/typeorm/checkConnection.ts",
    "db:check:prod:typeorm": "dotenv -e .env.production -- node dist/database/scripts/typeorm/checkConnection.js",
    "db:seed:dev:typeorm": "dotenv -e .env.development -- ts-node src/database/seeders/typeorm/index.ts",
    "db:seed:prod:typeorm": "dotenv -e .env.production -- node dist/database/seeders/typeorm/index.js",
    "db:migrate:generate:sequelize": "dotenv -e .env.development -- ts-node -r tsconfig-paths/register src/database/scripts/sequelize/migrations.ts generate",
    "db:migrate:create:sequelize": "dotenv -e .env.development -- ts-node -r tsconfig-paths/register src/database/scripts/sequelize/migrations.ts create",
    "db:migrate:run:dev:sequelize": "dotenv -e .env.development -- ts-node -r tsconfig-paths/register src/database/scripts/sequelize/migrations.ts run development",
    "db:migrate:run:prod:sequelize": "dotenv -e .env.production -- ts-node -r tsconfig-paths/register src/database/scripts/sequelize/migrations.ts run production",
    "db:migrate:revert:dev:sequelize": "dotenv -e .env.development -- ts-node -r tsconfig-paths/register src/database/scripts/sequelize/migrations.ts revert development",
    "db:migrate:revert:prod:sequelize": "dotenv -e .env.production -- ts-node -r tsconfig-paths/register src/database/scripts/sequelize/migrations.ts revert production",
    "db:migrate:revertAll:dev:sequelize": "dotenv -e .env.development -- ts-node -r tsconfig-paths/register src/database/scripts/sequelize/migrations.ts revertAll development",
    "db:migrate:revertAll:prod:sequelize": "dotenv -e .env.production -- ts-node -r tsconfig-paths/register src/database/scripts/sequelize/migrations.ts revertAll production",
    "db:reset:dev:sequelize": "dotenv -e .env.development cross-var -- prisma migrate reset --schema=$PRISMA_SCHEMA_PATH",
    "db:reset:test:sequelize": "dotenv -e .env.test cross-var -- prisma migrate reset --force --schema=$PRISMA_SCHEMA_PATH",
    "db:check:dev:sequelize": "dotenv -e .env.development -- ts-node src/database/scripts/sequelize/checkConnection.ts",
    "db:check:prod:sequelize": "dotenv -e .env.production -- node dist/database/scripts/sequelize/checkConnection.js",
    "db:seed:dev:sequelize": "dotenv -e .env.development -- ts-node src/database/seeders/sequelize/index.ts",
    "db:seed:prod:sequelize": "dotenv -e .env.production -- node dist/database/seeders/sequelize/index.js",
    "db:reset:dev:mongoose": "dotenv -e .env.development cross-var -- prisma migrate reset --schema=$PRISMA_SCHEMA_PATH",
    "db:reset:test:mongoose": "dotenv -e .env.test cross-var -- prisma migrate reset --force --schema=$PRISMA_SCHEMA_PATH",
    "db:check:dev:mongoose": "dotenv -e .env.development -- ts-node src/database/scripts/mongoose/checkConnection.ts",
    "db:check:prod:mongoose": "dotenv -e .env.production -- node dist/database/scripts/mongoose/checkConnection.js",
    "db:seed:dev:mongoose": "dotenv -e .env.development -- ts-node src/database/seeders/mongoose/index.ts",
    "db:seed:prod:mongoose": "dotenv -e .env.production -- node dist/database/seeders/mongoose/index.js"
  },
  "dependencies": {
    "@nestjs/common": "^10.2.7",
    "@nestjs/config": "^3.1.1",
    "@nestjs/core": "^10.2.7",
    "@nestjs/platform-express": "^10.2.7",
    "@nestjs/swagger": "^7.1.14",
    "@prisma/client": "^5.13.0",
    "compression": "^1.7.4",
    "cross-var": "^1.1.0",
    "dotenv-cli": "^7.4.2",
    "helmet": "^7.0.0",
    "joi": "^17.11.0",
    "mongoose": "^8.3.1",
    "nestjs-i18n": "^10.4.5",
    "pm2": "^5.3.0",
    "prisma": "^5.12.1",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.8.1",
    "sequelize": "^6.37.3",
    "sequelize-typescript": "^2.1.6",
    "typeorm": "^0.3.20",
    "uuid": "^9.0.1",
    "winston": "^3.11.0"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.3.0",
    "@commitlint/config-conventional": "^19.2.2",
    "@faker-js/faker": "^9.0.3",
    "@ianvs/prettier-plugin-sort-imports": "^4.2.1",
    "@nestjs/cli": "^10.1.18",
    "@nestjs/schematics": "^10.0.2",
    "@nestjs/testing": "^10.2.7",
    "@types/compression": "^1.7.3",
    "@types/express": "^4.17.18",
    "@types/jest": "^29.5.5",
    "@types/multer": "^1.4.11",
    "@types/node": "^20.8.3",
    "@types/supertest": "^2.0.14",
    "@types/uuid": "^9.0.8",
    "@typescript-eslint/eslint-plugin": "^6.7.4",
    "@typescript-eslint/parser": "^6.7.4",
    "cross-env": "^7.0.3",
    "eslint": "^8.51.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-import-resolver-typescript": "^3.6.1",
    "eslint-plugin-import": "^2.28.1",
    "eslint-plugin-jest": "^27.4.2",
    "eslint-plugin-prettier": "^5.0.0",
    "husky": "^8.0.3",
    "jest": "^29.7.0",
    "lint-staged": "^14.0.1",
    "prettier": "^3.0.3",
    "source-map-support": "^0.5.21",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.1",
    "ts-loader": "^9.5.0",
    "ts-node": "^10.9.1",
    "type-fest": "^4.15.0",
    "typescript": "^5.2.2"
  },
  "lint-staged": {
    "*.{ts,js}": [
      "npm run lint:fix"
    ],
    "*.{json,ts,js,html}": [
      "npm run format:fix"
    ]
  },
  "engines": {
    "node": ">=20"
  }
}
